import random as rnd
#import operator
#import os
#import matplotlib.pyplot as plt                 # import matplotlib
#import numpy as np                              # import numpy
#import time
#import copy
#import json
#import pprint
#import dm_bargain
#from dm_simulator import SimulateMarket
#import dm_travel
import dm_agents
#import dm_env as env
#import dm_utils as dm
import env_make_agents as mkt
import dm_sim_period as sim#


class ProcessResults(object):

    def __init__(self, market, sim_name, agents, contracts, debug):
        
        self.debug = debug            # if True print additional information
        self.results = {}             # period simulation results
                                      #(moving history, market conditions), key = week

        self.market = market                      # market environment object
        self.agent_list = agents                  # list of agent objects
        self.contracts = contracts
        self.sim_name = sim_name       # simulation name

        self.buyer_surplus = None   # Surplus generate by buyers. Sum of (value-price)
        self.seller_surplus = None  # Surplus generated by sellers.  Sum of (price-cost)
        self.actual_surplus = None  # Sum of buyer surplus and seller surplus
        self.efficiency = None      # (actual_surplus/eq_max_surplus) * 100.
        self.type_surplus = {}      # surplus accrued by trader type
        self.results_period = {}    # complete results record

    
    def get_prices(self):
        prices = []
        for contract in self.contracts:
            prices.append(contract[1])
        return prices

    def plot_prices(self):
        prices = self.get_prices()
        self.market.plot_supply_demand(prices)

    def calc_efficiency(self):
        """
        """

        self.buyer_surplus = 0
        self.seller_surplus = 0
        self.actual_surplus = 0
        self.efficiency = 0

        self.type_surplus = {}
        for trader in self.agent_list:
            trader_strategy = trader.name.split("_")[-1]  # trader.name = trader_t_type
            trader_surplus = 0
            unit = 0
            for contract in self.contracts:
                round_number, price, buyer_name, seller_name, b_cu, b_val, s_cos, s_cu = contract
                surplus = 0
                if trader.type == "BUYER":
                    res = trader.get_values()
                    if trader.name == buyer_name:
                        surplus = res[unit] - price
                        unit = unit + 1
                        trader_surplus = trader_surplus + surplus
                        self.buyer_surplus = self.buyer_surplus + surplus
                       # TODO Figure out type surplus
                        #self.type_surplus[self.current_week][trader_strategy] = \
                            #self.type_surplus[self.current_week].get(trader_strategy, 0) + surplus
                        #print(res, surplus, self.buyer_surplus)
                else:
                    costs = trader.get_costs()
                    if trader.name == seller_name:
                        surplus = price - costs[unit]
                        unit = unit + 1
                        trader_surplus = trader_surplus + surplus
                        self.seller_surplus = self.seller_surplus + surplus
                        # TODO Figure out type surplus
                        #self.type_surplus[self.current_week][trader_strategy] = \
                            #self.type_surplus[self.current_week].get(trader_strategy, 0) + surplus

                if trader_strategy in self.type_surplus:
                    self.type_surplus[trader_strategy]+=surplus
                else:
                    self.type_surplus[trader_strategy] = surplus
 
            self.actual_surplus = self.buyer_surplus + self.seller_surplus
            eq_units, eq_plow, eq_phigh, eq_max_surplus = self.market.get_equilibrium()
            self.efficiency = (self.actual_surplus / eq_max_surplus) * 100.0

    
    def get_results(self):
        """For one period: return results as dictionary"""

        self.prices = self.get_prices()
        total_price = 0.0
        if len(self.prices) == 0:
            avg_price = 0
        else:
            for price in self.prices:
                total_price += price
            avg_price = total_price / len(self.prices)

        eq_units, eq_plow, eq_phigh, eq_max_surplus = self.market.get_equilibrium()
        self.calc_efficiency()

        results = {}

        results["name"] = self.sim_name
        results["number traders"] = len(self.agent_list)
        results["number units"] = self.agent_list[0].get_num_units()

        # TODO Add trader types, values, and costs here

        results["eq low price"] = eq_plow
        results["eq high price"] = eq_phigh
        results["eq quantity"] = eq_units
        results["eq surplus"] = eq_max_surplus

        results["avg price"] = avg_price
        results["prices"] = self.prices
        results["quantity"] = len(self.prices)
        results["contracts"] = self.contracts

        results["buyer surplus"] = self.buyer_surplus
        results["seller surplus"] = self.seller_surplus
        results["actual surplus"] = self.actual_surplus
        results["efficiency"] = self.efficiency
        # TODO Strategy type record 
        #for trader_strategy in self.type_surplus[self.current_week]:
            #results[trader_strategy] = self.type_surplus[self.current_week][trader_strategy]

        self.results_period = results
        return self.results_period

    def display_results(self):
        """Displays a summary of the simulation
        """
        self.prices = self.get_prices()
        total_price = 0.0
        if len(self.prices) == 0:
            avg_price = 0
        else:
            for price in self.prices:
                total_price += price
            avg_price = total_price / len(self.prices)

        eq_units, eq_plow, eq_phigh, eq_max_surplus = self.market.get_equilibrium()

        self.calc_efficiency()

        print(f"      equilibrium price range is {eq_plow} to {eq_phigh}")
        print(f"      average price = {avg_price}")
        print(f"      equilibrium expected contracts = {eq_units}, actual contracts = {len(self.prices)}")
        print(f"      buyer surplus = {self.buyer_surplus}, seller surplus = {self.seller_surplus}")
        print(f"      actual_surplus = {self.actual_surplus}, maximum surplus = {eq_max_surplus}")
        print("      efficiency = {:0.2f}%.\n".format(self.efficiency))
        #for trader_strategy in self.type_surplus[self.current_week]:
            #print(f"  {trader_strategy} has surplus {self.type_surplus[self.current_week][trader_strategy]}")
    
    def get_efficiency(self):
        return self.efficiency

    def get_type_surplus(self):
        return self.type_surplus

if __name__ == "__main__":

    ZID = dm_agents.ZID
    ZIDA = dm_agents.ZIDA

    trader_objects = [ZID, ZID]     # List of artificial traders length 2
    debug = False
    num_traders = 10                  # traders (multiple of two)
    num_units = 8                     # Number of units per trader
    grid_size = 1
    lb = 200
    ub = 600

    #
    # test agents
    #

    # set up agents
    agent_maker = mkt.MakeAgents(num_traders, trader_objects, num_units, 
                                 grid_size, lb, ub, debug)
    #agent_maker.make_test_agents()
    agent_maker.make_agents()
    agents = agent_maker.get_agents()
    agent_maker.print_agents(agents)
    agent_maker.make_locations()

    # set up market
    agent_maker.make_market("test_market")
    agent_maker.show_equilibrium()
    agent_maker.plot_market()
    
    market = agent_maker.get_market()
    sim_name = 'test'
    week = 1
    period = 1
    num_rounds = 60
    debug = False
    plot_on = True
    sim = sim.SimPeriod(sim_name, num_rounds, agents, market, grid_size, debug, plot_on)
    sim.run_period()

    contracts = sim.get_contracts()
    pr = ProcessResults(market, sim_name, agents, contracts, debug)
    pr.plot_prices()
    pr.display_results()



