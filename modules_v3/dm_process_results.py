import random as rnd
import pandas as pd
#import operator
#import os
#import matplotlib.pyplot as plt                 # import matplotlib
#import numpy as np                              # import numpy
#import time
#import copy
#import json
#import pprint
#import dm_bargain
#from dm_simulator import SimulateMarket
#import dm_travel
import environment.dm_agents as dm_agents
#import dm_env as env
#import dm_utils as dm
import environment.env_make_agents as mkt
import simulations.dm_sim_period as sim#


class ProcessResults(object):

    def __init__(self, market, sim_name, agents, contracts, debug=False, market_type="ONE_TYPE", item_types=('C')):
        
        self.debug = debug            # if True print additional information
        self.results = {}             # period simulation results
                                      #(moving history, market conditions), key = week

        self.market = market                      # market environment object
        self.agent_list = agents                  # list of agent objects
        self.contracts = contracts
        self.sim_name = sim_name       # simulation name

        self.buyer_surplus = None   # Surplus generate by buyers. Sum of (value-price)
        self.seller_surplus = None  # Surplus generated by sellers.  Sum of (price-cost)
        self.actual_surplus = None  # Sum of buyer surplus and seller surplus
        self.efficiency = None      # (actual_surplus/eq_max_surplus) * 100.
        self.type_surplus = {}      # surplus accrued by trader type
        self.results_period = {}    # complete results record

        self.market_type = market_type

        self.buyer_surplus = 0
        self.seller_surplus = 0
        self.actual_surplus = 0
        self.efficiency = 0
        self.type_surplus = {}

        item_eff_cols = ['item_type', 'buyer_surplus', 'seller_surplus', 'actual_surplus', 'efficiency', 'strategy_buyer_surplus', 'strategy_seller_surplus', 
                            'type_surplus']
        self.item_eff_df = pd.DataFrame(columns=item_eff_cols)
        self.item_types = item_types
    
    def get_prices(self, avg_two=True, item=None):
        if len(self.contracts) == 0:
            return []
        if self.market_type == "ONE_TYPE":
            return list(self.contracts['price'].values)
        if self.market_type == "TWO_TYPE":
            if avg_two:
                all_list = list(self.contracts['price'].values)
                av_list = all_list[::2] # Here average by just taking every other contract
                return av_list
            elif not avg_two:
                assert item is not None
                return list(self.contracts[self.contracts['item_type']==item]['price'].values)

    def plot_prices(self):
        prices = self.get_prices()
        self.market.plot_supply_demand(prices)

    def calc_efficiency(self):
        """
        Calculate the realized efficiency of the total market - so this is for the WHOLE grid
        
        TODO Add LOCAL market efficiency calculation

        """
        debug = False
        if debug:
            print(self.market_type, self.item_types, self.agent_list[0].type)

        contracts = self.contracts
        if self.market_type == "ONE_TYPE":
            item_list = ['C']
        elif self.market_type == "TWO_TYPE":
            item_list = self.item_types

        for i_type in item_list:
            buyer_surplus = 0
            seller_surplus = 0
            actual_surplus = 0
            efficiency = 0

            if len(contracts) == 0:
                item_has_contracts = False
            else:
                item_contracts = contracts[contracts['item_type']==i_type]
                item_has_contracts = True

            type_surplus = {}
            strategy_buyer_surplus = {}
            strategy_seller_surplus = {}
            for trader in self.agent_list:
                trader_strategy = trader.name.split("_")[-1]  # trader.name = trader_t_type
                trader_id = trader.name
                trader_surplus = 0

                if trader.type == "BUYER" or trader.type == "SELLER":
                    trader_role = trader.type
                elif trader.type == "TRADER":
                    if i_type == trader.item_buyer:
                        trader_role = "BUYER"
                    elif i_type == trader.item_seller:
                        trader_role = "SELLER"
                

                # Calculate the surplus from buying for this trader
                if trader_role == "BUYER":
                    # Skip if no contracts
                    if item_has_contracts:
                        res = trader.get_values()
                        buy_contracts = item_contracts[item_contracts['buyer_id']==trader_id]
                        bought_units = len(buy_contracts)
                        util_sum = sum(res[:bought_units])
                        price_sum = buy_contracts["price"].sum()
                        buy_surplus = util_sum - price_sum
                    else:
                        buy_surplus = 0
                    buyer_surplus = buyer_surplus + buy_surplus
                    trader_surplus = trader_surplus + buy_surplus

                    if trader_strategy in strategy_buyer_surplus:
                        strategy_buyer_surplus[trader_strategy] += buyer_surplus
                    else:
                        strategy_buyer_surplus[trader_strategy] = buyer_surplus

                # Calculate the surplus from selling for this trader
                elif trader_role == "SELLER":
                    if item_has_contracts:
                        costs = trader.get_costs()
                        sell_contracts = item_contracts[item_contracts['seller_id']==trader_id]
                        sold_units = len(sell_contracts)
                        cost_sum = sum(costs[:sold_units])
                        price_sum = sell_contracts["price"].sum()
                        sell_surplus = price_sum - cost_sum
                    else:
                        sell_surplus = 0
                    seller_surplus = seller_surplus + sell_surplus
                    trader_surplus = trader_surplus + buy_surplus

                    if trader_strategy in strategy_seller_surplus:
                        strategy_seller_surplus[trader_strategy] += seller_surplus
                    else:
                        strategy_seller_surplus[trader_strategy] = seller_surplus

                if trader_strategy in type_surplus:
                    type_surplus[trader_strategy] += trader_surplus
                else:
                    type_surplus[trader_strategy] = trader_surplus
            
            # Transform surpluses into effciency
            actual_surplus = buyer_surplus + seller_surplus
            eq_units, eq_plow, eq_phigh, eq_max_surplus = self.market.get_equilibrium(item_type=i_type)
            efficiency = (actual_surplus / eq_max_surplus) * 100.0

            """        item_eff_cols = ['item_type', 'buyer_surplus', 'seller_surplus', 'actual_surplus', 'efficiency', 'strategy_buyer_surplus', 'strategy_seller_surplus', 
                            'type_surplus']
            self.item_eff_df = pd.DataFrame(columns=item_eff_cols)"""

            item_eval = (i_type, buyer_surplus, seller_surplus, actual_surplus, efficiency, strategy_buyer_surplus, strategy_seller_surplus, type_surplus)
            item1df = pd.DataFrame(columns=self.item_eff_df.columns)
            item1df.loc[0] = item_eval
            self.item_eff_df = pd.concat([self.item_eff_df, item1df]).reset_index(drop=True)
        
        # Calculate and save averages for all item types
        self.buyer_surplus = self.item_eff_df["buyer_surplus"].mean()
        self.seller_surplus = self.item_eff_df["seller_surplus"].mean()
        self.actual_surplus = self.item_eff_df["actual_surplus"].mean()
        self.efficiency = self.item_eff_df["efficiency"].mean()
        
        mean_strat_surplus = {}
        denom = len(item_list) # How many observations of this type of surplus there are
        for i_type in item_list:
            this_item_frame = self.item_eff_df[self.item_eff_df["item_type"]==i_type]
            type_surpluses = this_item_frame["type_surplus"].values
            
            for this_dict in type_surpluses:
                for this_strat in this_dict.keys():
                    this_surp = this_dict[this_strat]
                    if this_strat in mean_strat_surplus:
                        mean_strat_surplus[this_strat] += this_surp/denom
                    else:
                        mean_strat_surplus[trader_strategy] = this_surp/denom
        self.type_surplus = mean_strat_surplus


    
    def get_results(self):
        """For one period: return results as dictionary"""

        self.prices = self.get_prices()
        total_price = 0.0
        if len(self.prices) == 0:
            avg_price = 0
        else:
            for price in self.prices:
                total_price += price
            avg_price = total_price / len(self.prices)

        eq_units, eq_plow, eq_phigh, eq_max_surplus = self.market.get_equilibrium()
        self.calc_efficiency()

        results = {}

        results["name"] = self.sim_name
        results["number traders"] = len(self.agent_list)
        results["number units"] = self.agent_list[0].get_num_units()

        # TODO Add trader types, values, and costs here

        results["eq low price"] = eq_plow
        results["eq high price"] = eq_phigh
        results["eq quantity"] = eq_units
        results["eq surplus"] = eq_max_surplus

        results["avg price"] = avg_price
        results["prices"] = self.prices
        results["quantity"] = len(self.prices)
        results["contracts"] = self.contracts

        results["buyer surplus"] = self.buyer_surplus
        results["seller surplus"] = self.seller_surplus
        results["actual surplus"] = self.actual_surplus
        results["efficiency"] = self.efficiency

        results["item_eff_df"] = self.item_eff_df
        # TODO Strategy type record 
        #for trader_strategy in self.type_surplus[self.current_week]:
            #results[trader_strategy] = self.type_surplus[self.current_week][trader_strategy]

        self.results_period = results
        return self.results_period

    def display_results(self):
        """Displays a summary of the simulation
        """
        self.prices = self.get_prices()
        total_price = 0.0
        if len(self.prices) == 0:
            avg_price = 0
        else:
            for price in self.prices:
                total_price += price
            avg_price = total_price / len(self.prices)

        eq_units, eq_plow, eq_phigh, eq_max_surplus = self.market.get_equilibrium()

        self.calc_efficiency()

        print(f"      equilibrium price range is {eq_plow} to {eq_phigh}")
        print(f"      average price = {avg_price}")
        print(f"      equilibrium expected contracts = {eq_units}, actual contracts = {len(self.prices)}")
        print(f"      buyer surplus = {self.buyer_surplus}, seller surplus = {self.seller_surplus}")
        print(f"      actual_surplus = {self.actual_surplus}, maximum surplus = {eq_max_surplus}")
        print("      efficiency = {:0.2f}%.\n".format(self.efficiency))
        #for trader_strategy in self.type_surplus[self.current_week]:
            #print(f"  {trader_strategy} has surplus {self.type_surplus[self.current_week][trader_strategy]}")
    
    def get_efficiency(self):
        return self.efficiency

    def get_type_surplus(self):
        return self.type_surplus

if __name__ == "__main__":

    ZID = dm_agents.ZID
    ZIDA = dm_agents.ZIDA

    trader_objects = [ZID, ZID]     # List of artificial traders length 2
    debug = False
    num_traders = 10                  # traders (multiple of two)
    num_units = 8                     # Number of units per trader
    grid_size = 1
    lb = 200
    ub = 600

    #
    # test agents
    #

    # set up agents
    agent_maker = mkt.MakeAgents(num_traders, trader_objects, num_units, 
                                 grid_size, lb, ub, debug)
    #agent_maker.make_test_agents()
    agent_maker.make_agents()
    agents = agent_maker.get_agents()
    agent_maker.print_agents(agents)
    agent_maker.make_locations()

    # set up market
    agent_maker.make_market("test_market")
    agent_maker.show_equilibrium()
    agent_maker.plot_market()
    
    market = agent_maker.get_market()
    sim_name = 'test'
    week = 1
    period = 1
    num_rounds = 60
    debug = False
    plot_on = True
    sim = sim.SimPeriod(sim_name, num_rounds, agents, market, grid_size, debug, plot_on)
    sim.run_period()

    contracts = sim.get_contracts()
    pr = ProcessResults(market, sim_name, agents, contracts, debug)
    pr.plot_prices()
    pr.display_results()



