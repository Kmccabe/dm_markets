import random as rnd
#import operator
#import os
#import matplotlib.pyplot as plt                 # import matplotlib
#import numpy as np                              # import numpy
#import time
#import copy
#import json
#import pprint
import institutions.dm_bargain as dm_bargain
#from dm_simulator import SimulateMarket
import institutions.dm_travel as dm_travel
import environment.dm_agents as dm_agents
#import environment.dm_env as env
#import dm_utils as dm
import environment.env_make_agents as mkt

class SimPeriod(object):
    """Simulate a market on grid of consisting of weeks and days using two types of trading agents"""

    def __init__(self, sim_name, num_rounds, agents, market, grid_size, debug=False, plot_on=False):

        self.sim_name = sim_name            # simulation name
        #self.week = week                    # current week
        #self.period = period                # current day
        self.num_rounds = num_rounds        # number of bargaining rounds for a day
        self.agent_list = agents            # trader objects
        self.grid_size = grid_size          # simulation grid size: square
        self.debug = debug                  # if True print additional information
        self.plot_on = plot_on              # if True plot every week, otherwsie plot last week
        self.period_results = {}            # period simulation results
                                            #(moving history, market conditions), key = week
        self.market = market     # market environment object
        self.trevel = None       # current travel institution
        self.prices = []         # list_of_prices
        self.contracts = []      # list of contracts

        self.buyer_surplus = None   # Surplus generate by buyers. Sum of (value-price)
        self.seller_surplus = None  # Surplus generated by sellers.  Sum of (price-cost)
        self.actual_surplus = None  # Sum of buyer surplus and seller surplus
        self.efficiency = None      # (actual_surplus/eq_max_surplus) * 100.
        self.type_surplus = {}      # surplus accrued by trader type
        self.results_period = {}    # complete results record

    def match_found(self, agents):
        """Checks to see if there is at least one buyer and one seller at a location to allow bargaining"""
        match = False
        buyer_found = False
        seller_found = False
        for agent in agents:
            if agent.type == "BUYER":
                buyer_found = True
            if agent.type == "SELLER":
                seller_found = True
        if buyer_found and seller_found:
            match = True
        return match

    def run_period(self):
        """ Runs a simulation for a period:
                Each day: 
                    agents make travel decisions
                    make contracts with agents at the same node"""
        
        # Setup for simulation
        t_inst = dm_travel.Travel(self.grid_size, self.agent_list, self.debug)
        self.travel = t_inst
        t_inst.start_travel()
        b_inst = dm_bargain.Bargain(self.num_rounds)
        self.contracts = []
        self.prices = []
        
        # Simulate Period

        # run travel institution to let agents travel
        t_inst.run()
        g = t_inst.get_grid()

        # Walk occupied points in grid and run bargain institution at each point
        period_contracts = []
        for loc in g:
            agents_at = g[loc]
            # Run bargain if you have a BUYER and A Seller
            if self.match_found(agents_at):
                b_inst.set_agents(agents_at)
                b_inst.set_debug(self.debug)
                b_inst.run()
                loc_contracts = b_inst.get_contracts()
                period_contracts.extend(loc_contracts)
        self.contracts = period_contracts
        # save results
        self.period_results = {}
        history_of_travel = t_inst.get_history()
        self.period_results["Moving_History"] = history_of_travel
        self.period_results["contracts"] = self.contracts
        
        self.prices = []
        # Extract price from each contract
        for contract in self.contracts:
            self.prices.append(contract[1])
    
    def get_contracts(self):
        return self.contracts
    
    def get_prices(self):
        return self.prices

    def get_agents(self):
        return self.agent_list

    def get_name(self):
        return self.sim_name

    def get_grid(self):
        """Returns dictionary s_grid[loc] = list of agent names at loc"""
        grid = self.travel.get_grid()
        s_grid = {}
        for loc in grid:
            s_list = []
            for agent in grid[loc]:
                s_list.append(agent.name)
            s_grid[loc] = s_list
        return s_grid
        
        return grid


if __name__ == "__main__":

    ZID = dm_agents.ZID
    ZIDA = dm_agents.ZIDA

    trader_objects = [ZID, ZID]     # List of artificial traders length 2
    debug = False
    num_traders = 10                  # traders (multiple of two)
    num_units = 8                     # Number of units per trader
    grid_size = 2
    lb = 200
    ub = 600

    #
    # test agents
    #

    # set up agents
    agent_maker = mkt.MakeAgents(num_traders, trader_objects, num_units, 
                                 grid_size, lb, ub, debug)
    #agent_maker.make_test_agents()
    agent_maker.make_agents()
    agents = agent_maker.get_agents()
    agent_maker.print_agents(agents)
    agent_maker.make_locations()

    # set up market
    agent_maker.make_market("test_market")
    agent_maker.show_equilibrium()
    agent_maker.plot_market()
    
    market = agent_maker.get_market()
    sim_name = 'test'
    week = 1
    period = 1
    num_rounds = 60
    debug = False
    plot_on = True
    sim = SimPeriod(sim_name, week, period, num_rounds, agents, market, grid_size)

    sim.run_period()
    print(sim.get_contracts())
    sim.plot_prices()
    results = sim.get_results()
    sim.display_results()

