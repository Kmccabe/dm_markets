import random as rnd
import pandas as pd
#import operator
#import os
#import matplotlib.pyplot as plt                 # import matplotlib
#import numpy as np                              # import numpy
#import time
#import copy
#import json
#import pprint
import institutions.dm_bargain as dm_bargain
#from dm_simulator import SimulateMarket
import institutions.dm_travel as dm_travel
import environment.dm_agents as dm_agents
#import environment.dm_env as env
#import dm_utils as dm
import environment.env_make_agents as mkt

class SimPeriod(object):
    """Simulate a market on grid of consisting of weeks and days using two types of trading agents"""

    def __init__(self, sim_name, num_rounds, agents, market, grid_size, debug=False, plot_on=False, cur_period=0, week=0, market_type="ONE_TYPE", item_types=("C"),
                bidding_type="ABSTRACT", cur_local=False):

        self.sim_name = sim_name            # simulation name
        #self.week = week                    # current week
        #self.period = period                # current day
        self.num_rounds = num_rounds        # number of bargaining rounds for a day
        self.agent_list = agents            # trader objects
        self.grid_size = grid_size          # simulation grid size: square
        self.debug = debug                  # if True print additional information
        self.plot_on = plot_on              # if True plot every week, otherwsie plot last week
        self.period_results = {}            # period simulation results
                                            #(moving history, market conditions), key = week
        self.market = market     # market environment object
        self.travel = None       # current travel institution
        self.prices = []        # list_of_prices
        self.contracts = pd.DataFrame()     # list of contracts
        self.initial_grid = None  # Stores the locations of all the agents at the start of the simulation

        self.buyer_surplus = None   # Surplus generate by buyers. Sum of (value-price)
        self.seller_surplus = None  # Surplus generated by sellers.  Sum of (price-cost)
        self.actual_surplus = None  # Sum of buyer surplus and seller surplus
        self.efficiency = None      # (actual_surplus/eq_max_surplus) * 100.
        self.type_surplus = {}      # surplus accrued by trader type
        self.results_period = {}    # complete results record
        
        # New Things TODO not especially elegant
        self.cur_period = cur_period
        self.week = week
        self.market_type = market_type
        self.item_types = item_types
        self.bidding_type = bidding_type
        self.cur_local = cur_local
        
        self.debug2 = False

    def set_week(self, week):
        self.week = week

    def match_found(self, agents):
        """Checks to see if there is at least one buyer and one seller at a location to allow bargaining"""
        match = False
        if self.market_type == "ONE_TYPE":
            buyer_found = False
            seller_found = False
            for agent in agents:
                if agent.type == "BUYER":
                    buyer_found = True
                elif agent.type == "SELLER":
                    seller_found = True
            if buyer_found and seller_found:
                match = True
        elif self.market_type == "TWO_TYPE":
            buyers_of = set()
            sellers_of = set()
            for agent in agents:
                buys = agent.item_buyer
                sells = agent.item_seller
                buyers_of.add(buys)
                sellers_of.add(sells)
            if buyers_of.intersection(sellers_of): # note empty set evaluates to False, non-empty to True
                match = True
        return match

    def _output_format_grid(self, grid):
        """Returns the grid in a the format that was conceived for output"""
        s_grid = {}
        for loc in grid:
            s_list = []
            for agent in grid[loc]:
                s_list.append(agent.name)
            s_grid[loc] = s_list
        return s_grid

    def run_period(self):
        """ Runs a simulation for a period:
                Each day: 
                    agents make travel decisions
                    make contracts with agents at the same node"""
        
        if self.debug2: print(f"\tSP.01 in period {self.cur_period}")

        # Setup for simulation
        t_inst = dm_travel.Travel(self.grid_size, self.agent_list, self.debug)
        self.travel = t_inst
        t_inst.start_travel()
        b_inst = dm_bargain.Bargain(self.num_rounds, market_type=self.market_type, item_types=self.item_types, bidding_type=self.bidding_type)
        """__init__(self, rounds, quantity_limit = "HARD", money_limit = "HARD", market_type = "ONE_TYPE", item_types = "C", currency_types = "M",
        bidding_type = "ABSTRACT", property_rights = "SPOT", week=0, period=0, local_trades_only=True, barg_location=(0, 0)):"""
        # self.contracts = []
        # self.prices = []
        
        # Save initial grid locations of agents
        if self.initial_grid is None:
            self.initial_grid = self.travel.get_grid()

        # Simulate Period

        # TODO here add GLOBAL currency issuence

        # run travel institution to let agents travel
        t_inst.run()
        g = t_inst.get_grid()
        if self.debug2: print("\tSP.02 Ran Travel")
        # Walk occupied points in grid and run bargain institution at each point
        p_contracts = pd.DataFrame()
        for loc in g:
            agents_at = g[loc]
            # Run bargain if you have a BUYER and A Seller
            if self.match_found(agents_at):
                if self.debug2: print("\tSP.03 Match Found")
                # TODO here add local currency issuence
                b_inst.set_agents(agents_at)
                b_inst.set_debug(self.debug)
                b_inst.set_location(loc)
                b_inst.set_period(self.cur_period)
                b_inst.set_week(self.week)
                b_inst.run()
                loc_contracts = b_inst.get_contracts()
                p_contracts = pd.concat([p_contracts, loc_contracts])
                if self.debug2: print("\tSP.04 Ran Bargain")
        
        self.period_contracts = p_contracts

        # save results for this period
        self.period_results = {}
        history_of_travel = t_inst.get_history()
        self.period_results["Moving_History"] = history_of_travel
        self.period_results["contracts"] = p_contracts.copy()
        if len(p_contracts) > 0:
            self.period_results["prices"] = list(p_contracts["price"].values)
        else:
            self.period_results["prices"] = []
        
        # Save results for all periods
        self.contracts = pd.concat([self.contracts, p_contracts])
        if len(self.contracts)>0:
            self.prices = list(self.contracts["price"].values)
        else:
            self.price = []

        # Increment period counter
        self.cur_period += 1
    
    def get_contracts(self, all=False):
        if all:
            return self.contracts
        else:
            return self.period_contracts
    
    def get_prices(self):
        return self.prices

    def get_agents(self):
        return self.agent_list

    def get_name(self):
        return self.sim_name

    def get_grid(self):
        """Returns dictionary s_grid[loc] = list of agent names at loc"""
        grid = self.travel.get_grid()
        return self._output_format_grid(grid)
        

    def get_initial_grid(self):
        """Returns the starting (initial) locations of the agents"""
        return self._output_format_grid(self.initial_grid)

if __name__ == "__main__":

    ZID = dm_agents.ZID
    ZIDA = dm_agents.ZIDA

    trader_objects = [ZID, ZID]     # List of artificial traders length 2
    debug = False
    num_traders = 10                  # traders (multiple of two)
    num_units = 8                     # Number of units per trader
    grid_size = 2
    lb = 200
    ub = 600

    #
    # test agents
    #

    # set up agents
    agent_maker = mkt.MakeAgents(num_traders, trader_objects, num_units, 
                                 grid_size, lb, ub, debug)
    #agent_maker.make_test_agents()
    agent_maker.make_agents()
    agents = agent_maker.get_agents()
    agent_maker.print_agents(agents)
    agent_maker.make_locations()

    # set up market
    agent_maker.make_market("test_market")
    agent_maker.show_equilibrium()
    agent_maker.plot_market()
    
    market = agent_maker.get_market()
    sim_name = 'test'
    week = 1
    period = 1
    num_rounds = 60
    debug = False
    plot_on = True
    sim = SimPeriod(sim_name, week, period, num_rounds, agents, market, grid_size)

    sim.run_period()
    print(sim.get_contracts())
    sim.plot_prices()
    results = sim.get_results()
    sim.display_results()

